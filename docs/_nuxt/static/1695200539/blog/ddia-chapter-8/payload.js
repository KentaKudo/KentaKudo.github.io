__NUXT_JSONP__("/blog/ddia-chapter-8", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y){return {data:[{page:{slug:"ddia-chapter-8",description:"第8章は分散ノード環境において、認識し、立ち向かわないといけない困難について。分散ノードの敵は誰か、という話。\nそしてそれがどういった理由で発生するのかおよびそれを解決することがいかに困難であるかについての理解を深め、最後にそれにどう立ち向かえば良いかの方針が示されている。",title:"DDIA 読書ノート 【第8章】",language:"ja\u002FJP",tags:["ddia","distributed system"],image:{src:"jon-tyson-FlHdnPO6dlw-unsplash.jpg",alt:"many clocks",credit:"Photo by \u003Ca href=\"https:\u002F\u002Funsplash.com\u002F@jontyson?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\"\u003EJon Tyson\u003C\u002Fa\u003E on \u003Ca href=\"https:\u002F\u002Funsplash.com\u002Fphotos\u002FFlHdnPO6dlw?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\"\u003EUnsplash\u003C\u002Fa\u003E"},createdAt:"2023-09-20T00:00:00.000Z",toc:[{id:o,depth:g,text:o},{id:p,depth:g,text:p},{id:q,depth:g,text:q},{id:r,depth:g,text:r},{id:x,depth:g,text:y}],body:{type:"root",children:[{type:b,tag:s,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{href:"https:\u002F\u002Fopen.spotify.com\u002Fshow\u002F0J8LZwfrGB9BJLihy4Ldb1"},children:[{type:a,value:"London Tech Talk"}]},{type:a,value:" というポッドキャストを運営している "},{type:b,tag:e,props:{href:"https:\u002F\u002Ftwitter.com\u002Ftommyasai"},children:[{type:a,value:"@tommyasai"}]},{type:a,value:" さん・"},{type:b,tag:e,props:{href:"https:\u002F\u002Ftwitter.com\u002Fkenwagatsuma"},children:[{type:a,value:"@kenwagatsuma"}]},{type:a,value:" さん主催で DDIA の輪読会が行われており、それに向けて DDIA を読んでいるのでその際のまとめです。今回は第 8 章。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"理解したこと、考えたことをそのまま書き落としていくので読み物としては読みづらいかと思いますがその点は悪しからず。"}]},{type:b,tag:d,props:{},children:[{type:a,value:c}]}]},{type:a,value:c},{type:b,tag:h,props:{id:o},children:[{type:b,tag:e,props:{href:"#%E5%88%86%E6%95%A3%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E5%9B%B0%E9%9B%A3",ariaHidden:i,tabIndex:j},children:[{type:b,tag:k,props:{className:[l,m]},children:[]}]},{type:a,value:o}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"分散システム特有の困難としては二つ、不確定性と部分障害がある。そしてこれらが発生する理由としても二つ、ネットワークの不確かさとクロックの不確かさを起因としている。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"これらを解決するのは非常に困難、あるいは経済性とのトレードオフ上諦めざるを得ないかのどちらかで、特殊な機能要件が求められる環境、例えば金融や航空宇宙システムなどを除いて基本的にはこれらが存在するものとして扱わなければならない。"}]},{type:a,value:c},{type:b,tag:h,props:{id:p},children:[{type:b,tag:e,props:{href:"#%E4%B8%8D%E7%A2%BA%E3%81%8B%E3%81%AA%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF",ariaHidden:i,tabIndex:j},children:[{type:b,tag:k,props:{className:[l,m]},children:[]}]},{type:a,value:p}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"ネットワークがいかに信頼性に欠けるものであるか、という点は普段異常系の設計をする際にお馴染みかと思う。\nここで知っておく必要があるのは"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"フォールトを検知する唯一確実な方法はタイムアウトしかない、ということ"}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"そしてそのタイムアウトをどのように決めるかの絶対的な方法は存在しない、ということ"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"の二つである。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"どこでフォールトが起こっているかを調べる方法をいくつか例に挙げており、どれも有効な手段ではあるが、究極的にはアプリケーションからの応答がないと処理が実行されたかどうか・成功したかどうかの判定はできないため、確実な方法としてはタイムアウトを待つ、という選択肢だけが残る。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"そしてタイムアウトが発生する原因として処理の遅延や輻輳、キューイングの詰まりなどがあるが、いずれの場合も遅延がどのくらいになるかという上限は保証されておらず、レスポンスタイムの分布をもとに経験則的に設定する以外に方法はない。"}]},{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:"\n実際には同期ネットワークというものを使うことでネットワークの遅延には上限を設けることが可能ではあるが、その方式はバースト性のあるトラフィックには非常に非効率なため、一般的な通信でその方式が選択されることはない。\n"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"このようにネットワークに関する性質はとにかく都合の悪い要素が多いのだ。そしてそれはクロックの話題にも当てはまる。"}]},{type:a,value:c},{type:b,tag:h,props:{id:q},children:[{type:b,tag:e,props:{href:"#%E4%B8%8D%E7%A2%BA%E3%81%8B%E3%81%AA%E3%82%AF%E3%83%AD%E3%83%83%E3%82%AF",ariaHidden:i,tabIndex:j},children:[{type:b,tag:k,props:{className:[l,m]},children:[]}]},{type:a,value:q}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"クロックには時刻を計測するものとある時点からの増加分を数えていく二つの方法があり、単調増加のクロックの方が正確な時刻との同期を取る必要がない分信頼性が高いと言えるが、とはいえ正確に時刻を刻んでいく保証はない。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"クロックに依存したくなる典型的な例としてイベントの順序づけがある。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"ローカルなクロックに依存してしまうと悲惨で、あるノードは他のノードに対して未来にいるためいろんな悪いことが起こり得る。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"これを解決するために、イベントの相対的な発生順序だけを意味する、論理クロックというものを導入できるが、この論理クロックを生成するコンポーネントがボトルネックになりがちである。"}]},{type:a,value:c},{type:b,tag:s,props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Google Cloud Spannerはこの問題に対応するため、TrueTime APIを通して、クロックの値の信頼区間を公開している。二つ時刻の信頼区間が重ならないようにすることで、時刻のクロックに依存しながら順序を担保している。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"この信頼区間をできるだけ狭くするために、クロックを同期させることに最新の注意を払っている。"}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"クロックが信頼できないもう一つの話題としてプロセスの停止について述べている。ガベージコレクションが典型例だ。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"車のエアバッグなど、プロセスの停止が致命的な事故につながる可能性のある環境ではプロセスの停止を予測可能なものにする仕組みがあることにはあるが、これもまたトレードオフの話で、OS から何から全てのソフトウェアで一貫してサポートされている必要があるため、その利用は組み込みなどの環境に限られる。"}]},{type:a,value:c},{type:b,tag:h,props:{id:r},children:[{type:b,tag:e,props:{href:"#%E3%81%93%E3%81%AE%E5%9B%B0%E9%9B%A3%E3%81%AB%E3%81%A9%E3%81%86%E7%AB%8B%E3%81%A1%E5%90%91%E3%81%8B%E3%81%86%E3%81%AE%E3%81%8B",ariaHidden:i,tabIndex:j},children:[{type:b,tag:k,props:{className:[l,m]},children:[]}]},{type:a,value:r}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"章の最後にはこの困難に立ち向かう方法としてサイエンスな視点、つまりある点を仮定し、その仮定のもとである性質を満たし続けるアルゴリズムを導入する、という考え方を紹介する。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"章の冒頭に述べているように、その仮定が成り立たなくなる事象というのはいつか発生する、発生するものとして捉えないといけないのだが、その境界線を認識することで、具体的にどういうケースでその性質が満たされず、そしてどのように対応するのかということを事前に決めておける、非常に有用な考え方だ。"}]},{type:a,value:c},{type:b,tag:"hr",props:{},children:[]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"最後に、プログラミングとは全く関係のない感想だが、分散システムと人と人とのコミュニケーションは非常に似ているなと感じた。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"相手が何を考えているかを把握する絶対的な手段は存在せず、コミュニケーションに頼らざるを得ない一方で、コミュニケーションはとても不確実性だ。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"こうした不確かさを抱えつつも、全体としてはなんとか協調していく必要がある、というのは分散的なものの宿命なのかもしれない。"}]},{type:a,value:c},{type:b,tag:h,props:{id:x},children:[{type:b,tag:e,props:{href:"#references",ariaHidden:i,tabIndex:j},children:[{type:b,tag:k,props:{className:[l,m]},children:[]}]},{type:a,value:y}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:b,tag:e,props:{href:"https:\u002F\u002Fnote.com\u002Fruiu\u002Fn\u002Fn0349ed9f0d8f",rel:[t,u,v],target:w},children:[{type:a,value:"システム障害なしにうるう秒を乗り切る技術の発達について"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"クロックに依存する危険性と leap smearing について触れたエッセイ。読み物として面白い。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:b,tag:e,props:{href:"https:\u002F\u002Fqiita.com\u002Feverpeace\u002Fitems\u002F632831371da5ff215995",rel:[t,u,v],target:w},children:[{type:a,value:"最近よく聞く Quorum は過半数(多数決)よりも一般的でパワフルな概念だった"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Quoram とは何かについて解説した記事。単純に多数決と言えない奥深さを知れる。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c},{type:b,tag:f,props:{},children:[{type:b,tag:e,props:{href:"https:\u002F\u002Fforum.equinix.com\u002Fassets\u002Fimages\u002Ffiles\u002FCinnober_on_GC_pause_free_Java_applications.pdf",rel:[t,u,v],target:w},children:[{type:a,value:"Predictable low\nlatency"}]},{type:a,value:c},{type:b,tag:n,props:{},children:[{type:a,value:c},{type:b,tag:f,props:{},children:[{type:a,value:"Java システムの GC のレイテンシに対応するため、ノードを primary-secondary 構成にして、先にレスポンスを返した方の結果を採用する仕組み。どれだけ効果があるのかは不明だが、興味深い。"}]},{type:a,value:c}]},{type:a,value:c}]},{type:a,value:c}]}]},dir:"\u002Fblog",path:"\u002Fblog\u002Fddia-chapter-8",extension:".md",updatedAt:"2023-09-20T09:01:53.544Z",bodyPlainText:"\n\u003Caside\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fopen.spotify.com\u002Fshow\u002F0J8LZwfrGB9BJLihy4Ldb1\"\u003ELondon Tech Talk\u003C\u002Fa\u003E というポッドキャストを運営している \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Ftommyasai\"\u003E@tommyasai\u003C\u002Fa\u003E さん・\u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fkenwagatsuma\"\u003E@kenwagatsuma\u003C\u002Fa\u003E さん主催で DDIA の輪読会が行われており、それに向けて DDIA を読んでいるのでその際のまとめです。今回は第 8 章。\u003C\u002Fp\u003E\n\u003Cp\u003E理解したこと、考えたことをそのまま書き落としていくので読み物としては読みづらいかと思いますがその点は悪しからず。\u003Cp\u003E\n\u003C\u002Faside\u003E\n\n## 分散システムにおける困難\n\n分散システム特有の困難としては二つ、不確定性と部分障害がある。そしてこれらが発生する理由としても二つ、ネットワークの不確かさとクロックの不確かさを起因としている。\n\nこれらを解決するのは非常に困難、あるいは経済性とのトレードオフ上諦めざるを得ないかのどちらかで、特殊な機能要件が求められる環境、例えば金融や航空宇宙システムなどを除いて基本的にはこれらが存在するものとして扱わなければならない。\n\n## 不確かなネットワーク\n\nネットワークがいかに信頼性に欠けるものであるか、という点は普段異常系の設計をする際にお馴染みかと思う。\nここで知っておく必要があるのは\n\n- フォールトを検知する唯一確実な方法はタイムアウトしかない、ということ\n- そしてそのタイムアウトをどのように決めるかの絶対的な方法は存在しない、ということ\n\nの二つである。\n\nどこでフォールトが起こっているかを調べる方法をいくつか例に挙げており、どれも有効な手段ではあるが、究極的にはアプリケーションからの応答がないと処理が実行されたかどうか・成功したかどうかの判定はできないため、確実な方法としてはタイムアウトを待つ、という選択肢だけが残る。\n\nそしてタイムアウトが発生する原因として処理の遅延や輻輳、キューイングの詰まりなどがあるが、いずれの場合も遅延がどのくらいになるかという上限は保証されておらず、レスポンスタイムの分布をもとに経験則的に設定する以外に方法はない。\n\n\u003Caside\u003E\n実際には同期ネットワークというものを使うことでネットワークの遅延には上限を設けることが可能ではあるが、その方式はバースト性のあるトラフィックには非常に非効率なため、一般的な通信でその方式が選択されることはない。\n\u003C\u002Faside\u003E\n\nこのようにネットワークに関する性質はとにかく都合の悪い要素が多いのだ。そしてそれはクロックの話題にも当てはまる。\n\n## 不確かなクロック\n\nクロックには時刻を計測するものとある時点からの増加分を数えていく二つの方法があり、単調増加のクロックの方が正確な時刻との同期を取る必要がない分信頼性が高いと言えるが、とはいえ正確に時刻を刻んでいく保証はない。\n\nクロックに依存したくなる典型的な例としてイベントの順序づけがある。\n\nローカルなクロックに依存してしまうと悲惨で、あるノードは他のノードに対して未来にいるためいろんな悪いことが起こり得る。\n\nこれを解決するために、イベントの相対的な発生順序だけを意味する、論理クロックというものを導入できるが、この論理クロックを生成するコンポーネントがボトルネックになりがちである。\n\n\u003Caside\u003E\n\u003Cp\u003EGoogle Cloud Spannerはこの問題に対応するため、TrueTime APIを通して、クロックの値の信頼区間を公開している。二つ時刻の信頼区間が重ならないようにすることで、時刻のクロックに依存しながら順序を担保している。\u003C\u002Fp\u003E\n\u003Cp\u003Eこの信頼区間をできるだけ狭くするために、クロックを同期させることに最新の注意を払っている。\u003C\u002Fp\u003E\n\u003C\u002Faside\u003E\n\nクロックが信頼できないもう一つの話題としてプロセスの停止について述べている。ガベージコレクションが典型例だ。\n\n車のエアバッグなど、プロセスの停止が致命的な事故につながる可能性のある環境ではプロセスの停止を予測可能なものにする仕組みがあることにはあるが、これもまたトレードオフの話で、OS から何から全てのソフトウェアで一貫してサポートされている必要があるため、その利用は組み込みなどの環境に限られる。\n\n## この困難にどう立ち向かうのか\n\n章の最後にはこの困難に立ち向かう方法としてサイエンスな視点、つまりある点を仮定し、その仮定のもとである性質を満たし続けるアルゴリズムを導入する、という考え方を紹介する。\n\n章の冒頭に述べているように、その仮定が成り立たなくなる事象というのはいつか発生する、発生するものとして捉えないといけないのだが、その境界線を認識することで、具体的にどういうケースでその性質が満たされず、そしてどのように対応するのかということを事前に決めておける、非常に有用な考え方だ。\n\n---\n\n最後に、プログラミングとは全く関係のない感想だが、分散システムと人と人とのコミュニケーションは非常に似ているなと感じた。\n\n相手が何を考えているかを把握する絶対的な手段は存在せず、コミュニケーションに頼らざるを得ない一方で、コミュニケーションはとても不確実性だ。\n\nこうした不確かさを抱えつつも、全体としてはなんとか協調していく必要がある、というのは分散的なものの宿命なのかもしれない。\n\n## References\n\n- [システム障害なしにうるう秒を乗り切る技術の発達について](https:\u002F\u002Fnote.com\u002Fruiu\u002Fn\u002Fn0349ed9f0d8f)\n  - クロックに依存する危険性と leap smearing について触れたエッセイ。読み物として面白い。\n- [最近よく聞く Quorum は過半数(多数決)よりも一般的でパワフルな概念だった](https:\u002F\u002Fqiita.com\u002Feverpeace\u002Fitems\u002F632831371da5ff215995)\n  - Quoram とは何かについて解説した記事。単純に多数決と言えない奥深さを知れる。\n- [Predictable low\n  latency](https:\u002F\u002Fforum.equinix.com\u002Fassets\u002Fimages\u002Ffiles\u002FCinnober_on_GC_pause_free_Java_applications.pdf)\n  - Java システムの GC のレイテンシに対応するため、ノードを primary-secondary 構成にして、先にレスポンスを返した方の結果を採用する仕組み。どれだけ効果があるのかは不明だが、興味深い。\n"}}],fetch:{},mutations:void 0}}("text","element","\n","p","a","li",2,"h2","true",-1,"span","icon","icon-link","ul","分散システムにおける困難","不確かなネットワーク","不確かなクロック","この困難にどう立ち向かうのか","aside","nofollow","noopener","noreferrer","_blank","references","References")));