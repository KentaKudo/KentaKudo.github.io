__NUXT_JSONP__("/blog/division-overflow", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,_,$,aa,ab,ac){return {data:[{page:{slug:"division-overflow",description:"In this short post, I'm going to introduce integer overflow and small fun fact that causes overflow in seemingly impossible situation.",title:"Does integer division overflow?",language:"en\u002FGB",tags:["computerscience","systemprogramming","integeroverflow"],image:{src:"overflow.jpg",alt:"Spilled coffee",credit:"Photo by \u003Ca href=\"https:\u002F\u002Funsplash.com\u002F@nixcreative?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\"\u003ETyler Nix\u003C\u002Fa\u003E on \u003Ca href=\"https:\u002F\u002Funsplash.com\u002Fs\u002Fphotos\u002Fspill?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\"\u003EUnsplash\u003C\u002Fa\u003E"},createdAt:"2022-01-25T00:00:00.000Z",toc:[{id:S,depth:T,text:U},{id:V,depth:T,text:W}],body:{type:"root",children:[{type:b,tag:X,props:{id:S},children:[{type:b,tag:u,props:{href:"#whats-integer-overflow",ariaHidden:Y,tabIndex:Z},children:[{type:b,tag:c,props:{className:[_,$]},children:[]}]},{type:a,value:U}]},{type:a,value:e},{type:b,tag:"blockquote",props:{},children:[{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"In computer programming, an integer overflow occurs when an arithmetic operation attempts to create a numeric value that is outside of the range that can be represented with a given number of digits – either higher than the maximum or lower than the minimum representable value. — "},{type:b,tag:u,props:{href:"https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FInteger_overflow",rel:["nofollow","noopener","noreferrer"],target:"_blank"},children:[{type:a,value:"Wikipedia — Integer overflow"}]}]},{type:a,value:e}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"As you may know, addition of two integer numbers can overflow. For example addition of two "},{type:b,tag:h,props:{},children:[{type:a,value:k}]},{type:a,value:" number 127 and 1 overflows, and doesn't return mathematically correct answer."}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:A}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:C}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:D}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:F}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:G}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:H}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:J}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:M}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"127"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:N}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:"\"127 + 1 = %d\""}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"+"}]},{type:a,value:Q},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:q}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:R}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"This Go programme outputs "},{type:b,tag:h,props:{},children:[{type:a,value:"127 + 1 = -128"}]},{type:a,value:". For subtraction, if you think about "},{type:b,tag:h,props:{},children:[{type:a,value:"127 - (-1)"}]},{type:a,value:", this is going to overflow as this is the equivalent expression to the addition we just saw."}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"Likewise, multiplication of two integer numbers can overflow."}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:A}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:C}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:D}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:F}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:G}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:H}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:J}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:M}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"64"}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:"2"}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:"\"64 * 2 = %d\""}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"*"}]},{type:a,value:Q},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:q}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:R}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"This outputs "},{type:b,tag:h,props:{},children:[{type:a,value:"64 * 2 = -128"}]},{type:a,value:t}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"The reason is because 127 is the biggest number "},{type:b,tag:h,props:{},children:[{type:a,value:k}]},{type:a,value:" can represent and any calculation resulting in bigger number than this overflows returning unexpected result."}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"Here is a question: Can division of two integer numbers ever overflow? If yes, which combination of two integers make it happen?"}]},{type:a,value:e},{type:b,tag:X,props:{id:V},children:[{type:b,tag:u,props:{href:"#integer-division-overflow",ariaHidden:Y,tabIndex:Z},children:[{type:b,tag:c,props:{className:[_,$]},children:[]}]},{type:a,value:W}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"From mathematical point of view, if the divisor is either bigger than or equal to 1, or smaller than or equal to -1, the absolute value of the quotient is never going to be bigger than that of the dividend, and for any "},{type:b,tag:h,props:{},children:[{type:a,value:k}]},{type:a,value:" number this condition is satisfied. So it doesn't seem possible to make overflow happen with two "},{type:b,tag:h,props:{},children:[{type:a,value:k}]},{type:a,value:" numbers."}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"…However, yes it is possible, as you may have guessed."}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"What do you think is the output of this Go programme?"}]},{type:a,value:e},{type:b,tag:v,props:{className:[w]},children:[{type:b,tag:x,props:{className:[y,z]},children:[{type:b,tag:h,props:{},children:[{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:A}]},{type:a,value:B},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:C}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:D}]},{type:a,value:E},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:F}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:G}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:q}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:H}]},{type:a,value:I},{type:b,tag:c,props:{className:[d,j]},children:[{type:a,value:J}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:K},{type:b,tag:c,props:{className:[d,L]},children:[{type:a,value:k}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:M}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aa}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:ab}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:g},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:aa}]},{type:b,tag:c,props:{className:[d,s]},children:[{type:a,value:N}]},{type:a,value:O},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:t}]},{type:b,tag:c,props:{className:[d,o]},children:[{type:a,value:P}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:p}]},{type:b,tag:c,props:{className:[d,n]},children:[{type:a,value:"\"-128 \u002F -1 = %d\""}]},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:l}]},{type:a,value:r},{type:b,tag:c,props:{className:[d,m]},children:[{type:a,value:"\u002F"}]},{type:a,value:Q},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:q}]},{type:a,value:e},{type:b,tag:c,props:{className:[d,f]},children:[{type:a,value:R}]},{type:a,value:e}]}]}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"Mathematically correct answer is "},{type:b,tag:h,props:{},children:[{type:a,value:ab}]},{type:a,value:"…but wait, "},{type:b,tag:ac,props:{},children:[{type:a,value:"wasn't the biggest number "},{type:b,tag:h,props:{},children:[{type:a,value:k}]},{type:a,value:" can represent 127??"}]}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"That means this calculation overflows and the output is "},{type:b,tag:h,props:{},children:[{type:a,value:"-128 \u002F -1 = -128"}]},{type:a,value:t}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"The reason why this happens is while "},{type:b,tag:h,props:{},children:[{type:a,value:k}]},{type:a,value:" can represent "},{type:b,tag:h,props:{},children:[{type:a,value:"2^8 = 256"}]},{type:a,value:" different numbers, 0 has to be included, which means odd number "},{type:b,tag:h,props:{},children:[{type:a,value:"255"}]},{type:a,value:" is left to represent both positive and negative numbers. Most of the computing systems adopt a technique called "},{type:b,tag:"em",props:{},children:[{type:a,value:"two's complement"}]},{type:a,value:" to represent signed numbers"},{type:b,tag:"sup",props:{id:"fnref-1"},children:[{type:b,tag:u,props:{href:"#fn-1",className:["footnote-ref"]},children:[{type:a,value:N}]}]},{type:a,value:" and with that technique "},{type:b,tag:h,props:{},children:[{type:a,value:k}]},{type:a,value:" is going to have "},{type:b,tag:ac,props:{},children:[{type:a,value:"127 positive numbers and 128 negative numbers"}]},{type:a,value:t}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"As a result by dividing the biggest negative number by -1, we can cause overflow in integer division."}]},{type:a,value:e},{type:b,tag:i,props:{},children:[{type:a,value:"I'd like to know more of this kind of \"fun facts\", so please share if you know. In the next post I'd like to talk about what two's complement is, and why it is so widely used in the computing systems."}]},{type:a,value:e},{type:b,tag:v,props:{className:["footnotes"]},children:[{type:a,value:e},{type:b,tag:"hr",props:{},children:[]},{type:a,value:e},{type:b,tag:"ol",props:{},children:[{type:a,value:e},{type:b,tag:"li",props:{id:"fn-1"},children:[{type:a,value:"Signed numbers: Numbers that consist of both positive and negative numbers"},{type:b,tag:u,props:{href:"#fnref-1",className:["footnote-backref"]},children:[{type:a,value:"↩"}]}]},{type:a,value:e}]},{type:a,value:e}]}]},dir:"\u002Fblog",path:"\u002Fblog\u002Fdivision-overflow",extension:".md",updatedAt:"2023-03-31T03:01:52.245Z",bodyPlainText:"\n## What's integer overflow?\n\n\u003E In computer programming, an integer overflow occurs when an arithmetic operation attempts to create a numeric value that is outside of the range that can be represented with a given number of digits – either higher than the maximum or lower than the minimum representable value. — [Wikipedia — Integer overflow](https:\u002F\u002Fen.wikipedia.org\u002Fwiki\u002FInteger_overflow)\n\nAs you may know, addition of two integer numbers can overflow. For example addition of two `int8` number 127 and 1 overflows, and doesn't return mathematically correct answer.\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n        var i, j int8 = 127, 1\n        fmt.Printf(\"127 + 1 = %d\", i+j)\n}\n```\n\nThis Go programme outputs `127 + 1 = -128`. For subtraction, if you think about `127 - (-1)`, this is going to overflow as this is the equivalent expression to the addition we just saw.\n\nLikewise, multiplication of two integer numbers can overflow.\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n        var i, j int8 = 64, 2\n        fmt.Printf(\"64 * 2 = %d\", i*j)\n}\n```\n\nThis outputs `64 * 2 = -128`.\n\nThe reason is because 127 is the biggest number `int8` can represent and any calculation resulting in bigger number than this overflows returning unexpected result.\n\nHere is a question: Can division of two integer numbers ever overflow? If yes, which combination of two integers make it happen?\n\n## Integer division overflow\n\nFrom mathematical point of view, if the divisor is either bigger than or equal to 1, or smaller than or equal to -1, the absolute value of the quotient is never going to be bigger than that of the dividend, and for any `int8` number this condition is satisfied. So it doesn't seem possible to make overflow happen with two `int8` numbers.\n\n…However, yes it is possible, as you may have guessed.\n\nWhat do you think is the output of this Go programme?\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n        var i, j int8 = -128, -1\n        fmt.Printf(\"-128 \u002F -1 = %d\", i\u002Fj)\n}\n```\n\nMathematically correct answer is `128`…but wait, **wasn't the biggest number `int8` can represent 127??**\n\nThat means this calculation overflows and the output is `-128 \u002F -1 = -128`.\n\nThe reason why this happens is while `int8` can represent `2^8 = 256` different numbers, 0 has to be included, which means odd number `255` is left to represent both positive and negative numbers. Most of the computing systems adopt a technique called _two's complement_ to represent signed numbers[^1] and with that technique `int8` is going to have **127 positive numbers and 128 negative numbers**.\n\nAs a result by dividing the biggest negative number by -1, we can cause overflow in integer division.\n\nI'd like to know more of this kind of \"fun facts\", so please share if you know. In the next post I'd like to talk about what two's complement is, and why it is so widely used in the computing systems.\n\n[^1]: Signed numbers: Numbers that consist of both positive and negative numbers\n"}}],fetch:{},mutations:void 0}}("text","element","span","token","\n","punctuation"," ","code","p","keyword","int8",",","operator","string","function","(",")"," i","number",".","a","div","nuxt-content-highlight","pre","language-go","line-numbers","package"," main\n\n","import","\"fmt\"","\n\n","func","main","{","\n        ","var"," j ","builtin","=","1","\n        fmt","Printf","j","}","whats-integer-overflow",2,"What's integer overflow?","integer-division-overflow","Integer division overflow","h2","true",-1,"icon","icon-link","-","128","strong")));