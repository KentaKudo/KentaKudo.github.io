__NUXT_JSONP__("/blog/ddia-chapter-10", (function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t){return {data:[{page:{slug:"ddia-chapter-10",description:"第10章はバッチ処理について、MapReduceを中心に展開していく。",title:"DDIA 読書ノート 【第10章】",language:"ja\u002FJP",tags:["ddia","distributed system","mapreduce"],image:{src:"jonathan-farber-6jpdeeA2GBU-unsplash.jpg",alt:"batch of doughnuts",credit:"Photo by \u003Ca href=\"https:\u002F\u002Funsplash.com\u002F@farber?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\"\u003EJonathan Farber\u003C\u002Fa\u003E on \u003Ca href=\"https:\u002F\u002Funsplash.com\u002Fphotos\u002F6jpdeeA2GBU?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash\"\u003EUnsplash\u003C\u002Fa\u003E"},createdAt:"2023-10-17T00:00:00.000Z",toc:[{id:m,depth:f,text:n},{id:o,depth:f,text:p},{id:q,depth:f,text:r},{id:s,depth:f,text:t}],body:{type:"root",children:[{type:b,tag:d,props:{},children:[{type:a,value:"第 9 章が難しかったこともあり、読書ノートがまだ書ききれてないんですが、なんとか完成させようとは思っているのでとりあえず 10 章の話をどうぞ。。"}]},{type:a,value:c},{type:b,tag:"aside",props:{},children:[{type:a,value:c},{type:b,tag:d,props:{},children:[{type:b,tag:e,props:{href:"https:\u002F\u002Fopen.spotify.com\u002Fshow\u002F0J8LZwfrGB9BJLihy4Ldb1"},children:[{type:a,value:"London Tech Talk"}]},{type:a,value:" というポッドキャストを運営している "},{type:b,tag:e,props:{href:"https:\u002F\u002Ftwitter.com\u002Ftommyasai"},children:[{type:a,value:"@tommyasai"}]},{type:a,value:" さん・"},{type:b,tag:e,props:{href:"https:\u002F\u002Ftwitter.com\u002Fkenwagatsuma"},children:[{type:a,value:"@kenwagatsuma"}]},{type:a,value:" さん主催で DDIA の輪読会が行われており、それに向けて DDIA を読んでいるのでその際のまとめです。今回は第 10 章。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"理解したこと、考えたことをそのまま書き落としていくので読み物としては読みづらいかと思いますがその点は悪しからず。"}]},{type:b,tag:d,props:{},children:[{type:a,value:c}]}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"第 10 章からはチャプターが変わり、チャプター 3。このチャプターではそれぞれに特性の異なるシステムを組み合わせてより大きなシステムを構築する方法が紹介されている。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"システムは単体で全てのニーズに応えることが難しい and\u002For 非効率なため、どう組み合わせるか、といういうのは見落とされがちだが重要なトピックになってくる。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"その中で第 10 章はバッチ処理について。MapReduce に関する話題を中心に展開されている。"}]},{type:a,value:c},{type:b,tag:g,props:{id:m},children:[{type:b,tag:e,props:{href:"#unix-%E5%86%8D%E8%A8%AA",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:n}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"唐突に感じるところもあるがまず取り上げているのが Unix の哲学とそれに基づいた Unix ツール群、というのも MapReduce はこの Unix の概念や教訓と共通する部分が多いため、馴染みのある Unix がまず最初に取り上げられている。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"特に重要なのが Unix がファイルを介した、"},{type:b,tag:"strong",props:{},children:[{type:a,value:"一様なインターフェイスを持つ"}]},{type:a,value:"という点で、MapReduce も同様に分散ファイルシステムをインターフェイスとして、それぞれの Job がお互いを意識することなく入出力をやりとりできるようにデザインされている。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"Unix の考え方は様々なところで引用されており、馴染みが深いが、ここにも顔を出すその影響の大きさに改めて驚いた。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"この Unix の特徴を踏まえた上で MapReduce の詳細説明に入っていく。"}]},{type:a,value:c},{type:b,tag:g,props:{id:o},children:[{type:b,tag:e,props:{href:"#mapreduce-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:p}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"MapReduce にはその名にあるように、mapper と呼ばれるステップと reducer と呼ばれるステップがある。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"mapper では先に触れたように分散ファイルシステム上のファイルを通して受け取る入力のデータを key-value のペアにマッピングする。この key-value のペアはソートされたのち key ごとに同一の reducer に送られる。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"reducer では mapper から送られてくる key-value を元に好きなことをすればよく"},{type:b,tag:"sup",props:{id:"fnref-1"},children:[{type:b,tag:e,props:{href:"#fn-1",className:["footnote-ref"]},children:[{type:a,value:"1"}]}]},{type:a,value:"、例えば検索エンジンのインデックス構築であったり、出力をそのまま key-value ストアのデータとして利用するといった用法があるが、最もよく使われる使い道はなんといっても別の Job のインプットにする、ということだ。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"先にも触れたように MapReduce は分散ファイルシステムという一様なインターフェイスを持つ。reducer の出力は入力として受け取ったのと同様に分散ファイルシステムに書き出されるため、次の Job はその入力が前の Job の出力である、ということを知ることなく実行できる。これはまさに Unix ツールがファイルを介して連携している点と対応している。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"このように、ユーザーは mapper と reducer で何をするかだけを考えればよく、I\u002FO や分散ネットワークについて頭を悩ませることなく Job と Job を繋ぎ合わせて大量のデータを効率よく処理することができるのが MapReduce の特徴である。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"MapReduce は大量のデータに対するバッチ計算処理のフレームワークを提供したわけだが、そのことにより、収集したデータはひとまずどこかに保存してしまい、それを処理するのは別のタスクとして切り出す、というアプローチが広まった。これによりデータの収集よりもデータの解釈に重きが重要視されるきっかけになったり、生のデータの方が加工されたデータよりも有用だ、という考え方(sushi principle、寿司原則と呼ばれる)に繋がった。"}]},{type:a,value:c},{type:b,tag:g,props:{id:q},children:[{type:b,tag:e,props:{href:"#mapreduce-%E3%81%8B%E3%82%89%E6%99%82%E3%82%92%E7%B5%8C%E3%81%A6",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:r}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"と、このように MapReduce はデータ処理に対するアプローチを変える画期的なアイデアだったわけだが、論文が発表されたのは 2004 年。それから月日が経ち、MapReduce のある意味シンプルすぎる考え方から発展させて、より最適化が図られた手法が次々と開発されており、今日では MapReduce をそのまま利用する、ということは少なくなっている。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"具体的には、MapReduce は Job の都度ファイルへの書き出しが行われるため、読み書きのオーバーヘッドが発生する。Apache Spark や Apache Tez では mapper の出力を別の mapper に繋げたり、reducer の出力を直接次の mapper に繋げたりすることで、DAG(Direct Acyclic Graph: 有向非巡回グラフ)を構築、全体を一つの Job とすることでファイル書き出しのオーバーヘッドを減らす工夫がされている。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"この他にも中間層の不要なソーティングを無くしたり、耐障害性を高めるなど MapReduce を元により最適なバッチ処理のプラットフォームが実現されている。"}]},{type:a,value:c},{type:b,tag:g,props:{id:s},children:[{type:b,tag:e,props:{href:"#%E6%AC%A1%E7%AB%A0%E3%82%B9%E3%83%88%E3%83%AA%E3%83%BC%E3%83%A0%E5%87%A6%E7%90%86",ariaHidden:h,tabIndex:i},children:[{type:b,tag:j,props:{className:[k,l]},children:[]}]},{type:a,value:t}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"このように MapReduce を通して分散バッチ処理について紹介されてきたが、次章のトピックはストリーム処理となる。両者の１番の違いは処理するデータのサイズが事前にわかるかどうか、という点だ。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"今回も学びが多かったので、次章もとても楽しみ。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"この章に限らず DDIA の本それ自体に対してもそう言えるのだけど、これまでキャリアがかなり計算・ロジック(あるいはオンラインシステムとも言えるかも知れない)の方に偏っているので、データの方の知識・経験も増やしていきたいと思っている。"}]},{type:a,value:c},{type:b,tag:d,props:{},children:[{type:a,value:"もしこのあたりのトピックに関しておすすめの本やリソースなどがあれば(Hadoop などの個別トピックでも全然いいので)紹介してほしいです！"}]},{type:a,value:c},{type:b,tag:"div",props:{className:["footnotes"]},children:[{type:a,value:c},{type:b,tag:"hr",props:{},children:[]},{type:a,value:c},{type:b,tag:"ol",props:{},children:[{type:a,value:c},{type:b,tag:"li",props:{id:"fn-1"},children:[{type:a,value:"といってもそれは冪等な操作に限る。Job が失敗した際、失敗した計算のみを自動で再実行することで耐障害性を高めているため、実行する度に結果が変わる、というのでは困ってしまう。"},{type:b,tag:e,props:{href:"#fnref-1",className:["footnote-backref"]},children:[{type:a,value:"↩"}]}]},{type:a,value:c}]},{type:a,value:c}]}]},dir:"\u002Fblog",path:"\u002Fblog\u002Fddia-chapter-10",extension:".md",updatedAt:"2023-10-17T12:41:20.796Z",bodyPlainText:"\n第 9 章が難しかったこともあり、読書ノートがまだ書ききれてないんですが、なんとか完成させようとは思っているのでとりあえず 10 章の話をどうぞ。。\n\n\u003Caside\u003E\n\u003Cp\u003E\u003Ca href=\"https:\u002F\u002Fopen.spotify.com\u002Fshow\u002F0J8LZwfrGB9BJLihy4Ldb1\"\u003ELondon Tech Talk\u003C\u002Fa\u003E というポッドキャストを運営している \u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Ftommyasai\"\u003E@tommyasai\u003C\u002Fa\u003E さん・\u003Ca href=\"https:\u002F\u002Ftwitter.com\u002Fkenwagatsuma\"\u003E@kenwagatsuma\u003C\u002Fa\u003E さん主催で DDIA の輪読会が行われており、それに向けて DDIA を読んでいるのでその際のまとめです。今回は第 10 章。\u003C\u002Fp\u003E\n\u003Cp\u003E理解したこと、考えたことをそのまま書き落としていくので読み物としては読みづらいかと思いますがその点は悪しからず。\u003Cp\u003E\n\u003C\u002Faside\u003E\n\n第 10 章からはチャプターが変わり、チャプター 3。このチャプターではそれぞれに特性の異なるシステムを組み合わせてより大きなシステムを構築する方法が紹介されている。\n\nシステムは単体で全てのニーズに応えることが難しい and\u002For 非効率なため、どう組み合わせるか、といういうのは見落とされがちだが重要なトピックになってくる。\n\nその中で第 10 章はバッチ処理について。MapReduce に関する話題を中心に展開されている。\n\n## Unix 再訪\n\n唐突に感じるところもあるがまず取り上げているのが Unix の哲学とそれに基づいた Unix ツール群、というのも MapReduce はこの Unix の概念や教訓と共通する部分が多いため、馴染みのある Unix がまず最初に取り上げられている。\n\n特に重要なのが Unix がファイルを介した、**一様なインターフェイスを持つ**という点で、MapReduce も同様に分散ファイルシステムをインターフェイスとして、それぞれの Job がお互いを意識することなく入出力をやりとりできるようにデザインされている。\n\nUnix の考え方は様々なところで引用されており、馴染みが深いが、ここにも顔を出すその影響の大きさに改めて驚いた。\n\nこの Unix の特徴を踏まえた上で MapReduce の詳細説明に入っていく。\n\n## MapReduce について\n\nMapReduce にはその名にあるように、mapper と呼ばれるステップと reducer と呼ばれるステップがある。\n\nmapper では先に触れたように分散ファイルシステム上のファイルを通して受け取る入力のデータを key-value のペアにマッピングする。この key-value のペアはソートされたのち key ごとに同一の reducer に送られる。\n\nreducer では mapper から送られてくる key-value を元に好きなことをすればよく[^1]、例えば検索エンジンのインデックス構築であったり、出力をそのまま key-value ストアのデータとして利用するといった用法があるが、最もよく使われる使い道はなんといっても別の Job のインプットにする、ということだ。\n\n先にも触れたように MapReduce は分散ファイルシステムという一様なインターフェイスを持つ。reducer の出力は入力として受け取ったのと同様に分散ファイルシステムに書き出されるため、次の Job はその入力が前の Job の出力である、ということを知ることなく実行できる。これはまさに Unix ツールがファイルを介して連携している点と対応している。\n\n[^1]: といってもそれは冪等な操作に限る。Job が失敗した際、失敗した計算のみを自動で再実行することで耐障害性を高めているため、実行する度に結果が変わる、というのでは困ってしまう。\n\nこのように、ユーザーは mapper と reducer で何をするかだけを考えればよく、I\u002FO や分散ネットワークについて頭を悩ませることなく Job と Job を繋ぎ合わせて大量のデータを効率よく処理することができるのが MapReduce の特徴である。\n\nMapReduce は大量のデータに対するバッチ計算処理のフレームワークを提供したわけだが、そのことにより、収集したデータはひとまずどこかに保存してしまい、それを処理するのは別のタスクとして切り出す、というアプローチが広まった。これによりデータの収集よりもデータの解釈に重きが重要視されるきっかけになったり、生のデータの方が加工されたデータよりも有用だ、という考え方(sushi principle、寿司原則と呼ばれる)に繋がった。\n\n## MapReduce から時を経て\n\nと、このように MapReduce はデータ処理に対するアプローチを変える画期的なアイデアだったわけだが、論文が発表されたのは 2004 年。それから月日が経ち、MapReduce のある意味シンプルすぎる考え方から発展させて、より最適化が図られた手法が次々と開発されており、今日では MapReduce をそのまま利用する、ということは少なくなっている。\n\n具体的には、MapReduce は Job の都度ファイルへの書き出しが行われるため、読み書きのオーバーヘッドが発生する。Apache Spark や Apache Tez では mapper の出力を別の mapper に繋げたり、reducer の出力を直接次の mapper に繋げたりすることで、DAG(Direct Acyclic Graph: 有向非巡回グラフ)を構築、全体を一つの Job とすることでファイル書き出しのオーバーヘッドを減らす工夫がされている。\n\nこの他にも中間層の不要なソーティングを無くしたり、耐障害性を高めるなど MapReduce を元により最適なバッチ処理のプラットフォームが実現されている。\n\n## 次章、ストリーム処理\n\nこのように MapReduce を通して分散バッチ処理について紹介されてきたが、次章のトピックはストリーム処理となる。両者の１番の違いは処理するデータのサイズが事前にわかるかどうか、という点だ。\n\n今回も学びが多かったので、次章もとても楽しみ。\n\nこの章に限らず DDIA の本それ自体に対してもそう言えるのだけど、これまでキャリアがかなり計算・ロジック(あるいはオンラインシステムとも言えるかも知れない)の方に偏っているので、データの方の知識・経験も増やしていきたいと思っている。\n\nもしこのあたりのトピックに関しておすすめの本やリソースなどがあれば(Hadoop などの個別トピックでも全然いいので)紹介してほしいです！\n"}}],fetch:{},mutations:void 0}}("text","element","\n","p","a",2,"h2","true",-1,"span","icon","icon-link","unix-再訪","Unix 再訪","mapreduce-について","MapReduce について","mapreduce-から時を経て","MapReduce から時を経て","次章ストリーム処理","次章、ストリーム処理")));